Functions

	A function is a named block of code that performs a specific task, possibly acting upon a set of values given to it, or parameters, and possibly returning a single value. Functions save on compile time—no matter how many times you call them, functions are compiled only once for the page. They also improve reliability by allowing you to fix any bugs in one place, rather than everywhere you perform a task, and they improve readability by isolating code that performs specific tasks. 

Calling a Function 
	Functions in a PHP program can be built-in (or, by being in an extension, effectively 
built-in) or user-defined. Regardless of their source, all functions are evaluated in the same way: 

$someValue = function_name( [ parameter, ... ] ); 

parameters → number – different from function to function (+ same function)
	       → any valid expression
	       → in the specific order expected by the function

Examples:

// strlen() is a built-in function that returns the length of a string 
$length = strlen("PHP"); // $length is now 3 
// sin() and asin() are the sine and arcsine math functions 
$result = sin(asin(1)); // $result is the sine of arcsin(1), or 1.0 
// unlink() deletes a file 
$result = unlink("functions.txt"); // false if unsuccessful 

Defining a Function

	To define a function, use the following syntax: 
function [&] function_name([parameter[, ...]]) 
{ 
	statement list 
} 
	The statement list can include HTML. You can declare a PHP function that doesn’t contain any PHP code. For instance, the column() function simply gives a convenient short name to HTML code that may be needed many times throughout the page: 

<?php function column() 
{ ?> 
</td><td> 
<?php } 

function → name: any string that starts with a letter or underscore, followed by 
	         zero or more letters, underscores, and digits.
	    → name: case-insensitive
	    → built-in PHP functions: are called by convention with all lowercase 
                
	Typically, functions return some value. To return a value from a function, use the return statement: put return expr inside your function. When a return statement is encountered during execution, control reverts to the calling statement, and the evaluated results of expr will be returned as the value of the function. You can include any number of return statements in a function (for example, if you have a switch statement to determine which of several values to return).   

Example 3-1. String concatenation 
function strcat($left, $right) 
{ 
$combinedString = $left . $right; 
}              

Example 3-2. Using our concatenation function 
<?php 
function strcat($left, $right) 
{ 
	return $left . $right; 
} 
$first = "This is a "; 
$second = " complete sentence!"; 
echo strcat($first, $second); 
	 					
	You can nest function declarations, but with limited effect. Nested declarations do not 
limit the visibility of the inner-defined function, which may be called from anywhere in your program. The inner function does not automatically get the outer function’s 	arguments. And, finally, the inner function cannot be called until the outer function has been called, and also cannot be called from code parsed after the outer function: 
function outer ($a) 
{ 
function inner ($b) 
{ 
	echo "there $b"; 
} 
} 
echo "$a, hello "; 
// outputs "well, hello there reader" 
outer("well"); 
inner("reader"); 

2. Variable Scope
 	Functions keep their own sets of variables that are distinct from those of the page and of other functions. 
	The variables defined in a function, including its parameters, are not accessible outside the function, and, by default, variables defined outside a function are not accessible inside the function. The following example illustrates this: 
$a = 3; 
function foo() 
{ 
	$a += 2; 
} 

foo(); 
echo $a; 

Different $a variables. ( $a ==2, $a == 3);

Global Variables 
If you want a variable in the global scope to be accessible from within a function, you can use the global keyword. Its syntax is: 

global var1, var2, ... 

Changing the previous example to include a global keyword, we get: 
$a = 3; 
function foo() 
{ 
	global $a; 
	$a += 2; 
} 

foo(); 
echo $a; 

Same variable ($a == 5)

global keyword →  must be included in a function before any uses of the global variable 
or variables you want to access 
			   → function parameters can never be global variables, because they are declared before the body of the function 
			   → Using global is equivalent to creating a reference to the variable in the $GLOBALS variable. 

global $var; 
$var = $GLOBALS['var']; 

Static variables
	A static variable retains its value between all calls to the function and is initialized during a script’s execution only the first time the function is called. 

In Example 3-3, the variable $count is incremented by one each time the function is called. 

Example 3-3. Static variable counter 
<?php 
function counter() 
{ 
	static $count = 0; 
	return $count++; 
} 

for ($i = 1; $i <= 5; $i++) { 
	print counter(); 
} 
values {0..4}

3. Function Parameters 
	Functions can expect, by declaring them in the function definition, an arbitrary number of arguments. There are two different ways to pass parameters to a function. The first, and more common, is by value. The other is by reference. 

Passing Parameters by Value 
In most cases, you pass parameters by value. The argument is any valid expression. That expression is evaluated, and the resulting value is assigned to the appropriate variable in the function. In all of the examples so far, we’ve been passing arguments by value. 
Passing Parameters by Reference 
Passing by reference allows you to override the normal scoping rules and give a function direct access to a variable. To be passed by reference, the argument must be a variable; you indicate that a particular argument of a function will be passed by reference by preceding the variable name in the parameter list with an ampersand (&). Example 3-4 revisits our doubler() function with a slight change. 

Example 3-4. Doubler redux 
<?php 
function doubler(&$value) 
{ 
	$value = $value << 1; 
} 
$a = 3; 
doubler($a); 
echo $a; 
($a == 6)

Default Parameters 
To specify a default parameter, assign the parameter value in the function declaration. 
The value assigned to a parameter as a default value cannot be a complex expression; 
it can only be a scalar value: 

function getPreferences($whichPreference = 'all') 
{ 
// if $whichPreference is "all", return all prefs; 
// otherwise, get the specific preference requested... 
} 

When you call getPreferences(), you can choose to supply an argument. If you do, it 
returns the preference matching the string you give it; if not, it returns all preferences. 
A function may have any number of parameters with default values. However, they 
must be listed after all parameters that do not have default values. 

Variable Parameters 
	To declare a function with a variable number of arguments, leave out the parameter block entirely: 
function getPreferences() 
{ 
// some code 
} 

PHP provides three functions you can use in the function to retrieve the parameters passed to it. func_get_args() returns an array of all parameters provided to the function; 
func_num_args() returns the number of parameters provided to the function; and 
func_get_arg() returns a specific argument from the parameters. 

In Example 3-5, the count_list() function takes in any number of arguments. It loops 
over those arguments and returns the total of all the values. If no parameters are given, 
it returns false. 

Example 3-5. Argument counter 
<?php 
function countList() 
{ 
	if (func_num_args() == 0) { 
		return false; 
	} 	else { 
		$count = 0; 
		for ($i = 0; $i < func_num_args(); $i++) { 
			$count += func_get_arg($i); 
		} 
	} 
} 
return $count; 
echo countList(1, 5, 9); // outputs "15" 
The result of any of these functions cannot directly be used as a parameter to another function. Instead, you must first set a variable to the result of the function, and then use that in the function call. The following expression will not work: 
foo(func_num_args()); 
Instead, use: 
$count = func_num_args(); 
foo($count); 

Missing Parameters 
	PHP lets you be as lazy as you want—when you call a function, you can pass any number of arguments to the function. Any parameters the function expects that are not passed to it remain unset, and a warning is issued for each of them: 
function takesTwo($a, $b) 
{ 
	if (isset($a)) { 
		echo " a is set\n"; 
	} 
	if (isset($b)) { 
		echo " b is set\n"; 
	} 
} 
echo "With two arguments:\n"; 
takesTwo(1, 2); 
echo "With one argument:\n"; 
takesTwo(1); 

With two arguments: 
a is set 
b is set 
With one argument: 
Warning: Missing argument 2 for takes_two() in /path/to/script.php on line 6 
a is set 

Type Hinting 
 	To add a type hinting to a parameter, include the class name, array, or callable before the vari- 
able name in the function’s parameter list. For example: 
class Entertainment {} 
class Clown extends Entertainment {} 
class Job {} 
	function handleEntertainment(Entertainment $a, callable $callback = NULL) 
		{ 
		echo "Handling " . get_class($a) . " fun\n"; 
		} 
		if ($callback !== NULL) { 
			$callback(); 
		} 
		$callback = function() 
		{ 
		// do something 
		}; 
handleEntertainment(new Clown); // works 
handleEntertainment(new Job, $callback); // runtime error 
A type-hinted parameter must either be NULL, or an instance of the given class or a 
subclass of class, an array, or a callable as specified parameter. Otherwise, a runtime 
error occurs. 
Type hinting cannot be used to require a parameter be of a particular scalar type (such 
as integer or string) or to have a particular trait. 
Return Values 
PHP functions can return only a single value with the return keyword: 
function returnOne() 
{ 
return 42; 
} 

To return multiple values, return an array: 
function returnTwo() 
{ 
return array("Fred", 35); 
} 
If no return value is provided by a function, the function returns NULL instead. 
By default, values are copied out of the function. To return a value by reference, both 
declare the function with an & before its name and when assigning the returned value 
to a variable: 
$names = array("Fred", "Barney", "Wilma", "Betty"); 
function &findOne($n) { 
global $names; 
} 
return $names[$n]; 
$person =& findOne(1); 
$person = "Barnetta"; 
// Barney 
// changes $names[1] 

	In this code, the findOne() function returns an alias for $names[1], instead of a copy of ts value. Because we assign by reference, $person is an alias for $names[1], and the second assignment changes the value in $names[1]. 
	This technique is sometimes used to return large string or array values efficiently from a function. 	However, PHP implements copy-on-write for variable values, meaning that returning a reference from a function is typically unnecessary. Returning a reference to a value is slower than returning the value itself. 

Variable Functions 
	As with variable variables where the expression refers to the value of the variable whose name is the value held by the apparent variable (the $$ construct), you can add parentheses after a variable to call the function whose name is the value held by the apparent variable, e.g., $variable(). Consider this situation, where a variable is used to determine which of three functions to call: 
switch ($which) { 
	case 'first': 
	  first(); 
  	  break; 

	case 'second': 
	  second(); 
	  break; 


	case 'third': 
	  third(); 
	  break; 
} 
	In this case, we could use a variable function call to call the appropriate function. To make a variable function call, include the parameters for a function in parentheses after the variable. To rewrite the previous example: 
$which(); // if $which is "first", the function first() is called, etc... 
	If no function exists for the variable, a runtime error occurs when the code is evaluated. 
	To prevent this, you can use the built-in function function_exists() to determine whether a function exists for the value of the variable before calling the function: 
$yesOrNo = function_exists(function_name); 
For example: 
if (function_exists($which)) { 
	$which(); // if $which is "first", the function first() is called, etc... 
} 

Language constructs such as echo() and isset() cannot be called through variable functions: 
$which = "echo"; 
$which("hello, world"); 
// does not work 

Anonymous Functions 
	You can create an anonymous function using the normal function definition syntax, but assign it to a variable or pass it directly. 
Example 3-6 shows an example using usort(). 

Example 3-6. Anonymous functions 
$array = array("really long string here, boy", "this", "middling length", "larger"); 
usort($array, function($a, $b) { 
return strlen($a) - strlen($b); 
}); 
print_r($array); 

The array is sorted by usort() using the anonymous function, in order of string length. Anonymous functions can use the variables defined in their enclosing scope using the use syntax. 
For example: 
$array = array("really long string here, boy", "this", "middling length", "larger"); 
$sortOption = 'random'; 
usort($array, function($a, $b) use ($sortOption) 
{ 
if ($sortOption == 'random') { 
// sort randomly by returning (−1, 0, 1) at random 
return rand(0, 2) - 1; 
} 
else { 
return strlen($a) - strlen($b); 
} 
}); 
print_r($array); 
Note that incorporating variables from the enclosing scope is not the same as using global variables—global variables are always in the global scope, while incorporating variables allows a closure to use the variables defined in the enclosing scope. Also note that this is not necessarily the same as the scope in which the closure is called. For example: 

$array = array("really long string here, boy", "this", "middling length", "larger"); 
$sortOption = "random"; //global
function sortNonrandom($array) 
{ 
	$sortOption = false;  //variabila locala  
	usort($array, function($a, $b) use ($sortOption)  
	//functie de sortare( $array, functie cu 2 parametri + use al treilea parametru
	{ 
	if ($sortOption == "random") { 
	// sort randomly by returning (−1, 0, 1) at random 
		return rand(0, 2) - 1; 
         } else { 
		return strlen($a) - strlen($b); 
	} 
   }); 
} 
print_r($array); 
print_r(sortNonrandom($array)); 
In this example, $array is sorted normally, rather than randomly—the value of $sort Option inside the closure is the value of $sortOption in the scope of sortNonrandom(), not the value of $sortOption in the global scope. 


